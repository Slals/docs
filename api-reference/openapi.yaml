openapi: 3.0.0
servers:
  - url: https://api.stan-app.fr
externalDocs:
  description: Find out more about Stan
  url: https://doc.stan-app.fr
info:
  description: Stan Client API
  version: 1.0.0
  title: Stan API
  license:
    name: Apache-2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
paths:
  /v1/apis:
    put:
      tags:
        - settings
      summary: Updates API settings
      operationId: updateApiSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiSettingsRequestBody'
      responses:
        '200':
          description: Successful operation
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - stan_basic_auth: []
  /v1/customers:
    post:
      tags:
        - customer
      summary: Create a new customer
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequestBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - stan_basic_auth: []
  /v1/payments:
    post:
      tags:
        - payment
      summary: Prepare an oncoming payment
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequestBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PreparedPayment'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - stan_basic_auth: []
    get:
      tags:
        - payment
      summary: Get all payments
      operationId: getPayments
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - stan_basic_auth: []
  /v1/payments/{payment_id}:
    get:
      tags:
        - payment
      summary: Get a payment
      description: Get a payment with an UUID.
      operationId: getPayment
      parameters:
        - name: payment_id
          in: path
          description: UID of the payment
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - stan_basic_auth: []
  /v1/checkouts:
    post:
      tags:
        - checkout
      summary: Create a new checkout
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CheckoutRequestBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Checkout'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - stan_basic_auth: []
  /v1/refunds:
    post:
      tags:
        - refund
      summary: Create a refund
      operationId: create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefundRequestBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - stan_basic_auth: []
    get:
      tags:
        - refund
      summary: Get all refunds
      operationId: getRefunds
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Refund'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - stan_basic_auth: []
  /v1/refunds/{refund_id}:
    get:
      tags:
        - refund
      summary: Get a refund
      description: Get a refund with an UUID.
      operationId: getRefund
      parameters:
        - name: refund_id
          in: path
          description: UID of the refund
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Refund'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
      security:
        - stan_basic_auth: []
components:
  securitySchemes:
    stan_basic_auth:
      type: http
      scheme: basic
  responses:
    '400':
      description: Bad data format
    '401':
      description: Unauthorized, please provided api client_id and client_secret as Basic auth
    '500':
      description: The servers encountered an alien
  schemas:
    Address:
      title: A physical address
      type: object
      properties:
        firstname:
          type: string
        lastname:
          type: string
        street_address:
          type: string
        street_address_line2:
          type: string
        locality:
          type: string
        zip_code:
          type: string
        country:
          type: string
        region:
          type: string
    ApiSettingsRequestBody:
      title: An API settings request body
      type: object
      properties:
        payment_webhook_url:
          type: string
          format: uri
          description: Payment webhook to be notified when a payment status is updated. Use this to update your order status when a payment has been made
        oauth_redirect_url:
          type: string
          format: uri
          description: Login redirection for Stan Connect
    Checkout:
      title: A checkout is the starting point of a checkout flow
      type: object
      properties:
        id:
          type: string
          format: uuid
        total_amount:
          type: integer
          format: int64
          description: Total amount to pay
        total_amount_before_discount:
          type: integer
          format: int64
          description: Total amount to pay before any discount
        subtotal_amount:
          type: integer
          format: int64
          description: Subtotal amount of this checkout
        discount_amount:
          type: integer
          format: int64
          description: Total discount applied to this checkout
        tax_rate:
          type: integer
          format: int64
          description: Tax rate
        discount_code:
          type: string
          description: Discount code applied to this checkout
        is_testmode:
          type: boolean
          description: Wether the checkout is in testmode or not
        line_items:
          type: array
          description: Items included in the checkout
          items:
            $ref: '#/components/schemas/LineItem'
        merchant:
          $ref: '#/components/schemas/Merchant'
        session_id:
          type: string
          description: Defines a session for the current user
        order_id:
          type: string
          description: Order id associated to this checkout
    CheckoutRequestBody:
      title: A checkout request body
      type: object
      required:
        - name
        - email
        - address
      properties:
        return_url:
          type: string
          format: uri
          description: It's where the user will be redirected at the end of the checkout, whether it's success, cancelled or failed
        total_amount:
          type: integer
          format: int64
          description: Defines the total cost of the checkout (subtotal + shipping + tax)
        session_id:
          type: string
          description: An ID for the checkout session, it can be the cart ID or anything else
        order_id:
          type: string
          description: The ID of the current order if created
        subtotal_amount:
          type: integer
          format: int64
          description: Defines the total cost of the checkout before taxes and without discounts
        discount_amount:
          type: integer
          format: int64
          description: Defines the absolute discount amount
        tax_rate:
          type: integer
          format: int64
          description: Defines the percent of taxes (express as integer)
        tax_cost:
          type: integer
          format: int64
        discount_code:
          type: string
          description: Defines the code used for the discount
        line_items:
          type: array
          items:
            $ref: '#/components/schemas/LineItem'
    Customer:
      title: A customer is a payer
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          description: Customer fullname
        email:
          type: string
          format: email
        phone_number:
          type: string
        address:
          $ref: '#/components/schemas/Address'
    CustomerRequestBody:
      title: A customer request body
      type: object
      required:
        - name
        - email
        - address
      properties:
        name:
          type: string
          description: Customer fullname
        email:
          type: string
          format: email
        address:
          $ref: '#/components/schemas/Address'
        phone_number:
          type: string
    LineItem:
      title: A line item
      type: object
      properties:
        product_id:
          type: string
        quantity:
          type: integer
        unit_price:
          type: integer
        discount_amount:
          type: integer
        description:
          type: string
        sku:
          type: string
        image_url:
          type: string
          format: uri
        product_url:
          type: string
          format: uri
    Merchant:
      title: Merchant's infos
      type: object
      properties:
        name:
          type: string
        website:
          type: string
        privacy_policy_url:
          type: string
          format: uri
        general_terms_url:
          type: string
          format: uri
        logo_url:
          type: string
          format: uri
    Payment:
      title: A payment
      type: object
      properties:
        id:
          type: string
          format: uuid
        order_id:
          type: string
          format: string
        amount:
          type: integer
          description: Amount in cents
          format: int32
        payment_status:
          type: string
          description: Status of the payment
          enum:
            - payment_prepared
            - payment_holding
            - payment_pending
            - payment_failure
            - payment_success
            - payment_cancelled
            - payment_partial_refunded
            - payment_refunded
            - payment_expired
        merchant_id:
          type: string
          description: UUID of the merchant who created the payment
          format: uuid
        customer_id:
          type: string
          description: UUID of the customer
          format: uuid
        is_refundable:
          type: boolean
          description: Weither the payment is refundable or not
        refunded_amount:
          type: integer
          format: int32
          description: Refunded amount for this payment in cents
        created_at:
          type: string
          format: date-time
    PaymentRequestBody:
      title: A payment request body
      type: object
      required:
        - order_id
        - amount
        - return_url
      properties:
        order_id:
          type: string
          format: string
        amount:
          type: integer
          description: Amount in cents
          format: int32
        subtotal_amount:
          type: integer
          description: The subtotal amount in cents. This amount is optionnal, it's useful to give information to the user.
          format: int32
        shipping_amount:
          type: integer
          description: The shipping cost in cents. This amount is optionnal, it's useful to give information to the user.
          format: int32
        discount_amount:
          type: integer
          description: The discount amount in cents. This amount is optionnal, it's useful to give information to the user.
          format: int32
        tax_amount:
          type: integer
          description: The tax amount in cents. This amount is optionnal, it's useful to give information to the user.
          format: int32
        return_url:
          type: string
          format: uri
          description: The return URL where the user will land after the payment has been complete. The URL will be appended with a URI query payment_status with the value corresponding to the Payment status and state with the value you provided in state.
        cancel_url:
          type: string
          format: uri
          description: The redirect URL used in case of payment cancel or fail.
        customer_id:
          type: string
          description: UUID of the customer
          format: uuid
        state:
          type: string
          description: Payment state that will be used to preserve the state after the redirection to the provided return_url or cancel_url. If not state is provided Stan will generate one and transmit it to the return_url or cancel_url.
    PreparedPayment:
      title: A prepared payment
      type: object
      properties:
        payment_id:
          type: string
          format: uuid
        state:
          type: string
          format: string
        redirect_url:
          type: string
          format: uri
    Refund:
      title: A refund
      type: object
      properties:
        refund_id:
          type: string
          format: uuid
        payment_id:
          type: string
          format: string
        amount:
          type: integer
          description: Amount in cents
          format: int32
        status:
          type: string
          description: Status of the refund, a refund is a reversed payment
          enum:
            - payment_holding
            - payment_pending
            - payment_failure
            - payment_success
            - payment_cancelled
        reason:
          type: string
          description: Reason for the refund
          enum:
            - requested_by_customer
            - duplicate
            - fraudulent
        created_at:
          type: string
          format: date-time
    RefundRequestBody:
      title: A refund request body
      type: object
      required:
        - payment_id
        - amount
        - reason
      properties:
        payment_id:
          type: string
          description: Payment ID linked to this refund
          format: uuid
        amount:
          type: integer
          description: Amount in cents
          format: int32
        reason:
          type: string
          description: Reason for the refund
          enum:
            - requested_by_customer
            - duplicate
            - fraudulent
